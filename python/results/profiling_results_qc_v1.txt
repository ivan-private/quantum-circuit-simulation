Timer unit: 1e-06 s

Total time: 0.245123 s
File: ../src/quantum_circuit_v1.py
Function: h at line 20

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    20                                               @profile
    21                                               def h(self, qubit):
    22        22        199.0      9.0      0.1          H = 1 / np.sqrt(2) * np.array([[1, 1], 
    23        11          1.0      0.1      0.0                                         [1, -1]])
    24        11        106.0      9.6      0.0          I = np.eye(2)
    25                                                   
    26        11          4.0      0.4      0.0          GATE = np.array([1])
    27       132         43.0      0.3      0.0          for i in range(self.n_qubits)[::-1]:
    28       121         13.0      0.1      0.0              if i == qubit:
    29        11      15865.0   1442.3      6.5                  GATE = np.kron(GATE, H)
    30                                                       else:
    31       110     164230.0   1493.0     67.0                  GATE = np.kron(GATE, I)
    32                                                   
    33        11      64662.0   5878.4     26.4          self.statevector = GATE @ self.statevector

Total time: 2.20441 s
File: ../src/quantum_circuit_v1.py
Function: cp at line 36

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    36                                               @profile
    37                                               def cp(self, angle, control_qubit, target_qubit):
    38        55        517.0      9.4      0.0          P = np.array([[1, 0], [0, np.exp(1j * angle)]])
    39        55        528.0      9.6      0.0          I = np.eye(2)
    40       110         52.0      0.5      0.0          I_0 = np.array([[1, 0], 
    41        55          6.0      0.1      0.0                          [0, 0]])
    42                                                   
    43       110         40.0      0.4      0.0          I_1 = np.array([[0, 0], 
    44        55          4.0      0.1      0.0                          [0, 1]])
    45                                           
    46        55         21.0      0.4      0.0          GATE_0 = np.array([1])
    47        55         17.0      0.3      0.0          GATE_1 = np.array([1])
    48                                           
    49       660        208.0      0.3      0.0          for i in range(self.n_qubits)[::-1]:
    50       605         87.0      0.1      0.0              if i == target_qubit:
    51        55       6599.0    120.0      0.3                  GATE_0 = np.kron(GATE_0, I)
    52        55       8134.0    147.9      0.4                  GATE_1 = np.kron(GATE_1, P)
    53       550         62.0      0.1      0.0              elif i == control_qubit:
    54        55     131112.0   2383.9      5.9                  GATE_0 = np.kron(GATE_0, I_0)
    55        55     172482.0   3136.0      7.8                  GATE_1 = np.kron(GATE_1, I_1)
    56                                                       else:
    57       495     725530.0   1465.7     32.9                  GATE_0 = np.kron(GATE_0, I)
    58       495     780257.0   1576.3     35.4                  GATE_1 = np.kron(GATE_1, I)
    59                                           
    60        55     345312.0   6278.4     15.7          GATE = GATE_0 + GATE_1
    61                                           
    62        55      33444.0    608.1      1.5          self.statevector = GATE @ self.statevector

Total time: 0 s
File: ../src/quantum_circuit_v1.py
Function: x at line 65

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    65                                               @profile
    66                                               def x(self, qubit):
    67                                                   X = np.array([[0, 1], 
    68                                                                 [1, 0]])
    69                                                   I = np.eye(2)
    70                                           
    71                                                   GATE = np.array([1])
    72                                           
    73                                                   for i in range(self.n_qubits)[::-1]:
    74                                                       if i == qubit:
    75                                                           GATE = np.kron(GATE, X)
    76                                                       else:
    77                                                           GATE = np.kron(GATE, I)
    78                                                   
    79                                                   self.statevector = GATE @ self.statevector

Total time: 0.04799 s
File: ../src/quantum_circuit_v1.py
Function: swap at line 82

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    82                                               @profile
    83                                               def swap(self, qubit1, qubit2):        
    84         5       4884.0    976.8     10.2          SWAP = np.eye(self.n_states)
    85                                           
    86     10245       1202.0      0.1      2.5          for i in range(len(SWAP)):
    87     10240       1185.0      0.1      2.5              q1_value = (i >> qubit1) & 1
    88     10240       1176.0      0.1      2.5              q2_value = (i >> qubit2) & 1
    89                                           
    90     10240        973.0      0.1      2.0              if q1_value == q2_value or q1_value != 0:
    91      7680        518.0      0.1      1.1                  continue
    92                                                       
    93                                                       # swaps the two bits for qubit1 and qubit2 in i
    94      2560        389.0      0.2      0.8              j = i ^ ((1 << qubit1) | (1 << qubit2))
    95                                           
    96      2560      10635.0      4.2     22.2              SWAP[[i, j]] = SWAP[[j, i]]
    97                                           
    98         5      27028.0   5405.6     56.3          self.statevector = SWAP @ self.statevector

Total time: 2.59121 s
File: ../src/quantum_circuit_v1.py
Function: qft at line 101

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   101                                               @profile
   102                                               def qft(self):
   103        12          4.0      0.3      0.0          for i in range(self.n_qubits)[::-1]:
   104        11     248181.0  22561.9      9.6              self.h(i)
   105        66         40.0      0.6      0.0              for j in range(i-1, -1, -1):
   106        55        152.0      2.8      0.0                  angle = np.pi * 2**(j-i)
   107        55    2287576.0  41592.3     88.3                  self.cp(angle, j, i)
   108                                                   
   109         6          1.0      0.2      0.0          for i in range(self.n_qubits // 2):
   110         5      55254.0  11050.8      2.1              self.swap(i, self.n_qubits-1-i)

Total time: 2.59129 s
File: ../src/quantum_circuit_v1.py
Function: main at line 112

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   112                                           @profile
   113                                           def main():
   114                                               # this main function is only used when profiling
   115         1          8.0      8.0      0.0      qc = QuantumCircuit_v1(11)
   116         1    2591252.0    3e+06    100.0      qc.qft()
   117                                           
   118         1         30.0     30.0      0.0      print(f"QFT RAN SUCCESSFULLY WITH {qc.n_qubits} QUBITS")

